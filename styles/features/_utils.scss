@use "sass:string";
@use "../base/modes.scss" as *;

/*
 primary color reverse 
*/

$primary-color-reverse-selectors: (
  // reverse on-primary colors when primary color is too bright
  "#barWorkspace",
  "#message",
  ".b3-button--outline:hover",
  ".b3-dialog__action .b3-button--text",
  "#transactionError + .b3-dialog__action button:last-child",
  "#configBazaarReadme .item__side .b3-button:not(.b3-button--progress):hover",
  ".protyle-breadcrumb__icon:hover",
  ".protyle-breadcrumb__item",
  ":not(.config-bazaar__title)>.b3-button:not(.b3-button--outline, .b3-button--big)",
  ".b3-menu",
  ".b3-switch",
  ".b3-chip--primary",
  ".b3-chip--current"
);

/* 
背景模糊
*/
$thick-transparency: 0.85;
$thick-blur-rd: 40px;
$medium-transparency: 0.8;
$medium-blur-rd: 20px;
$thin-transparency: 0.75;
$thin-blur-rd: 12px;

@mixin bg-blur(
  $blur-radius: 40px,
  $saturate-value: 3,
  $brightness-light: 1.1,
  $brightness-dark: calc(2 - $brightness-light)
) {
  backdrop-filter: blur($blur-radius) saturate($saturate-value) brightness($brightness-light);

  [data-theme-mode="dark"] & {
    backdrop-filter: blur($blur-radius) saturate($saturate-value) brightness($brightness-dark);
  }
}

/* 
溢出渐隐
*/
/*
source: https://toward.studio/latest/making-css-gradients-smooth
*/
/*
A simple little SCSS mixin for creating scrim gradients
Inspired by Andreas Larson - https://github.com/larsenwork
https://css-tricks.com/easing-linear-gradients/
*/
@mixin smoothGradientHex($startColor: #000, $direction: "to bottom") {
  $scrimCoordinates: (
    0: 1,
    19: 0.738,
    34: 0.541,
    47: 0.382,
    56.5: 0.278,
    65: 0.194,
    73: 0.126,
    80.2: 0.075,
    86.1: 0.042,
    91: 0.021,
    95.2: 0.008,
    98.2: 0.002,
    100: 0,
  );

  $hue: hue($startColor);
  $saturation: saturation($startColor);
  $lightness: lightness($startColor);
  $stops: ();

  @each $colorStop, $alphaValue in $scrimCoordinates {
    $stop: hsla($hue, $saturation, $lightness, $alphaValue) percentage($colorStop/100);
    $stops: append($stops, $stop, comma);
  }

  background: linear-gradient(unquote($direction), $stops);
}

@mixin smoothGradientVar(
  $startColor,
  $startColorOpacityFactorLight: 1,
  $startColorOpacityFactorDark: $startColorOpacityFactorLight,
  $direction: "to bottom"
) {
  $scrimCoordinates: (
    0: 1,
    19: 0.738,
    34: 0.541,
    47: 0.382,
    56.5: 0.278,
    65: 0.194,
    73: 0.126,
    80.2: 0.075,
    86.1: 0.042,
    91: 0.021,
    95.2: 0.008,
    98.2: 0.002,
    100: 0,
  );

  $stops-light: ();
  $stops-dark: ();

  @each $colorStop, $alphaValue in $scrimCoordinates {
    $stop-light: rgb(from $startColor r g b / calc($alphaValue * $startColorOpacityFactorLight))
      percentage(calc($colorStop/100));
    $stop-dark: rgb(from $startColor r g b / calc($alphaValue * $startColorOpacityFactorDark))
      percentage(calc($colorStop/100));
    $stops-light: append($stops-light, $stop-light, comma);
    $stops-dark: append($stops-dark, $stop-dark, comma);
  }

  background: linear-gradient(unquote($direction), $stops-light);

  @if $startColorOpacityFactorLight !=$startColorOpacityFactorDark {
    @include darkmode-counterpart {
      background: linear-gradient(unquote($direction), $stops-dark);
    }
  }
}

@mixin overflow-indicator-line($height: 1px) {
  &::before {
    content: "";
    display: block;
    position: sticky;
    top: 0;
    width: 100%;
    height: $height;
    z-index: 1;
    opacity: 0;
    background-color: var(--b3-border-color-trans);

    animation-name: maskAppear-bgClr;
    animation-timeline: scroll();
    animation-range: 2px 100%;

    margin-bottom: calc(-1 * $height);

    pointer-events: none;
  }
}

// rtl unresolved
@mixin overflow-indicator-fadein-bgClr($size: 12px, $bg-clr: var(--b3-theme-background), $range: "top bottom") {
  $range-dir: (
    "top": "to bottom",
    "bottom": "to top",
    "left": "to right",
    "right": "to left",
  );

  @if str-index($range, "top") or str-index($range, "left") {
    $dir: map-get($range-dir, nth(string.split($range, " "), 1));

    &::before {
      content: "";
      display: block;
      position: sticky;
      z-index: 1;
      opacity: 0;

      animation-name: maskAppear-bgClr;
      animation-range: 1px 100%;

      // background-image: linear-gradient(#{$dir}, $bg-clr, transparent);
      @include smoothGradientVar($bg-clr, $direction: #{$dir});

      margin-#{str-slice($dir, 4)}: calc(-1 * $size);

      pointer-events: none;

      @if $dir == "to bottom" {
        top: 0;
        width: 100%;
        height: $size;
        animation-timeline: scroll();
      } @else {
        left: 0;
        min-width: $size;
        height: 100%;
        animation-timeline: scroll(x);
      }
    }
  }

  @if str-index($range, "bottom") or str-index($range, "right") {
    $dir: map-get($range-dir, nth(string.split($range, " "), -1)); // -> 'to top' / 'to left'

    &::after {
      content: "";
      display: block;
      position: sticky;
      z-index: 1;
      opacity: 0;

      animation-name: maskAppear-bgClr;
      animation-range: 0% calc(100% - 1px);
      animation-direction: alternate-reverse;

      // background-image: linear-gradient(#{$dir}, $bg-clr, transparent);
      @include smoothGradientVar($bg-clr, $direction: #{$dir});

      margin-#{str-slice($dir, 4)}: calc(-1 * $size);

      pointer-events: none;

      @if $dir == "to top" {
        bottom: 0;
        width: 100%;
        height: $size;
        animation-timeline: scroll();
      } @else {
        right: 0;
        min-width: $size;
        height: 100%;
        animation-timeline: scroll(x);
      }
    }
  }
}

@mixin overflow-indicator-fadein-mask($size: 12px, $range: "top bottom") {
  $range-start: nth(string.split($range, " "), 1);
  $range-end: nth(string.split($range, " "), -1);
  $gradient-dir: "";
  $this-id: unique-id();

  @if str-index($range, "top") or str-index($range, "bottom") {
    $gradient-dir: "to bottom";
  } @else {
    $gradient-dir: "to right";
  }

  mask-image: linear-gradient(
    #{$gradient-dir},
    transparent,
    black var(--mask-stop-start),
    black calc(100% - var(--mask-stop-end)),
    transparent
  );

  $anim-name: ();
  $anim-range: ();
  $anim-dir: ();

  @if $range-start == "top" or $range-start == "left" {
    $anim-name: append($anim-name, "maskAppear-mask-start-#{$this-id}", comma);
    $anim-range: append($anim-range, "1px 100%", comma);
    $anim-dir: append($anim-dir, "alternate", comma);
  }

  @if $range-end == "bottom" or $range-end == "right" {
    $anim-name: append($anim-name, "maskAppear-mask-end-#{$this-id}", comma);
    $anim-range: append($anim-range, "0% calc(100% - 1px)", comma);
    $anim-dir: append($anim-dir, "alternate-reverse", comma);
  }

  animation-name: #{$anim-name};
  animation-range: #{$anim-range};
  animation-direction: #{$anim-dir};

  @if $range-start == "top" or $range-start == "bottom" {
    animation-timeline: scroll(self y);
  } @else {
    animation-timeline: scroll(self x);

    :where(:lang(ar_SA), :lang(he_IL)) & {
      animation-range: #{reverse-list($anim-range)};
      animation-direction: #{reverse-list($anim-dir)};
    }
  }

  @keyframes maskAppear-mask-start-#{$this-id} {
    0% {
      --mask-stop-start: 0px;
    }

    1% {
      --mask-stop-start: #{$size};
    }

    100% {
      --mask-stop-start: #{$size};
    }
  }

  @keyframes maskAppear-mask-end-#{$this-id} {
    0% {
      --mask-stop-end: 0px;
    }

    1% {
      --mask-stop-end: #{$size};
    }

    100% {
      --mask-stop-end: #{$size};
    }
  }
}

@property --mask-stop-start {
  syntax: "<length>";
  inherits: false;
  initial-value: 0px;
}

@property --mask-stop-end {
  syntax: "<length>";
  inherits: false;
  initial-value: 0px;
}
